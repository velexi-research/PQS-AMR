c***********************************************************************
c
c kernels_3d.f
c
c F77 routines for unit tests of 3D lsm functions
c
c***********************************************************************

c***********************************************************************
c
c Compute signed distance function for sphere of specified radius
c centered at the origin.
c
c Parameters
c ----------
c phi: [output] signed distance function
c
c x_lo: array containing lower corner of grid
c
c dx: array containing grid spacing in each coordinate direction
c
c r: radius of sphere
c
c *_gb_lo: lower corner of index range for ghostbox
c
c *_gb_hi: upper corner of index range for ghostbox
c
c ib_lo: lower corner of index range for interior box
c
c ib_hi: upper corner of index range for interior box
c
c***********************************************************************
      subroutine setPhiSphere(
     &  phi,
     &  phi_gb_lo, phi_gb_hi,
     &  ib_lo, ib_hi,
     &  x_lo,
     &  dx,
     &  r)
***********************************************************************
c { begin subroutine
      implicit none

      integer phi_gb_lo(1:3), phi_gb_hi(1:3)
      @REAL@ phi(phi_gb_lo(1):phi_gb_hi(1),
     &           phi_gb_lo(2):phi_gb_hi(2),
     &           phi_gb_lo(3):phi_gb_hi(3))

      integer ib_lo(1:3), ib_hi(1:3)
      real*8 x_lo(1:3)
      real*8 dx(1:3)
      real*8 r

      integer i, j, k
      real x, y, z

c     loop over interior cells {
      do k=ib_lo(3),ib_hi(3)
        do j=ib_lo(2),ib_hi(2)
          do i=ib_lo(1),ib_hi(1)

            x = x_lo(1) + (i - ib_lo(1) + 0.5) * dx(1)
            y = x_lo(2) + (j - ib_lo(2) + 0.5) * dx(2)
            z = x_lo(3) + (k - ib_lo(3) + 0.5) * dx(3)

            phi(i,j,k) = sqrt(x**2 + y**2 + z**2) - r

          enddo
        enddo
      enddo
c     } end loop over interior cells

      return
      end
c } end subroutine
