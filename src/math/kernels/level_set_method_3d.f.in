c***********************************************************************
c
c level_set_method_3d.f
c
c F77 routines for Level Set Method computations in three space
c dimensions
c
c***********************************************************************

c***********************************************************************
c
c Compute volume of region where level set function is less
c than 0.
c
c Parameters
c ----------
c phi: level set function
c
c dx: array containing grid spacing in each coordinate direction
c
c eps: numerical width Heaviside function (as a function of phi)
c
c *_gb_lo: lower corner of index range for ghost box
c
c *_gb_hi: upper corner of index range for ghost box
c
c patch_box_lo: lower corner of index range for patch box
c
c patch_box_hi: upper corner of index range for patch box
c
c Return value
c ------------
c volume of region where phi < 0
c
c Notes
c -----
c - When phi is a signed distance function, the numerical width of the
c   Heaviside function as a function of spatial position is approximately
c   equal to (2 * eps).
c
c***********************************************************************
      @REAL@ function lsm3dVolumePhiLessThanZero(
     &  phi,
     &  phi_gb_lo, phi_gb_hi,
     &  patch_box_lo, patch_box_hi,
     &  dx,
     &  eps)
***********************************************************************
c { begin function
      implicit none

      integer phi_gb_lo(1:3), phi_gb_hi(1:3)
      @REAL@ phi(phi_gb_lo(1):phi_gb_hi(1),
     &           phi_gb_lo(2):phi_gb_hi(2),
     &           phi_gb_lo(3):phi_gb_hi(3))

      integer patch_box_lo(1:3), patch_box_hi(1:3)
      real*8 dx(1:3)
      real*8 eps

      integer i, j, k
      real*8 phi_cur
      real*8 phi_cur_over_eps
      real*8 one_minus_H
      real*8 dV
      real*8 pi
      parameter (pi=3.14159265358979323846d0)
      real*8 one_over_pi
      parameter (one_over_pi=0.31830988618379d0)

      real*8 volume

c     compute dV
      dV = dx(1) * dx(2) * dx(3)

c     initialize volume to zero
      volume = 0.0d0

c     loop over patch box {
      do k=patch_box_lo(3),patch_box_hi(3)
        do j=patch_box_lo(2),patch_box_hi(2)
          do i=patch_box_lo(1),patch_box_hi(1)

            phi_cur = phi(i,j,k)

            if (phi_cur .lt. -eps) then

              volume = volume + dV

            elseif (phi_cur .lt.  eps) then

              phi_cur_over_eps = phi_cur/eps

              one_minus_H = 0.5d0*( 1 - phi_cur_over_eps
     &                                - one_over_pi
     &                                 *sin(pi*phi_cur_over_eps))

              volume = volume + one_minus_H*dV

            endif

          enddo
        enddo
      enddo
c     } end loop over patch box

c     set result
      lsm3dVolumePhiLessThanZero = volume

      return
      end
c } end function
c***********************************************************************

c***********************************************************************
c
c Compute volume of region where level set function is greater
c than 0.
c
c Parameters
c ----------
c phi: level set function
c
c dx: array containing grid spacing in each coordinate direction
c
c eps: numerical width Heaviside function (as a function of phi)
c
c *_gb_lo: lower corner of index range for ghost box
c
c *_gb_hi: upper corner of index range for ghost box
c
c patch_box_lo: lower corner of index range for patch box
c
c patch_box_hi: upper corner of index range for patch box
c
c Return value
c ------------
c volume of region where phi > 0
c
c Notes
c -----
c - When phi is a signed distance function, the numerical width of the
c   Heaviside function as a function of spatial position is approximately
c   equal to (2 * eps).
c
c***********************************************************************
      @REAL@ function lsm3dVolumePhiGreaterThanZero(
     &  phi,
     &  phi_gb_lo, phi_gb_hi,
     &  patch_box_lo, patch_box_hi,
     &  dx,
     &  eps)
***********************************************************************
c { begin function
      implicit none

      integer phi_gb_lo(1:3), phi_gb_hi(1:3)
      @REAL@ phi(phi_gb_lo(1):phi_gb_hi(1),
     &           phi_gb_lo(2):phi_gb_hi(2),
     &           phi_gb_lo(3):phi_gb_hi(3))

      integer patch_box_lo(1:3), patch_box_hi(1:3)
      real*8 dx(1:3)
      real*8 eps

      integer i, j, k
      real*8 phi_cur
      real*8 phi_cur_over_eps
      real*8 H
      real*8 dV
      real*8 pi
      parameter (pi=3.14159265358979323846d0)
      real*8 one_over_pi
      parameter (one_over_pi=0.31830988618379d0)

      real*8 volume

c     compute dV
      dV = dx(1) * dx(2) * dx(3)

c     initialize volume to zero
      volume = 0.0d0

c     loop over patch box {
      do k=patch_box_lo(3),patch_box_hi(3)
        do j=patch_box_lo(2),patch_box_hi(2)
          do i=patch_box_lo(1),patch_box_hi(1)

            phi_cur = phi(i,j,k)

            if (phi_cur .gt. eps) then

              volume = volume + dV

            elseif (phi_cur .gt.  -eps) then

              phi_cur_over_eps = phi_cur/eps

              H = 0.5d0*( 1 + phi_cur_over_eps
     &                      + one_over_pi*sin(pi*phi_cur_over_eps))

              volume = volume + H*dV

          endif

          enddo
        enddo
      enddo
c     } end loop over patch box

c     set result
      lsm3dVolumePhiGreaterThanZero = volume

      return
      end
c } end function
c***********************************************************************
