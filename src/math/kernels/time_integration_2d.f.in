c***********************************************************************
c
c  time_integration_2d.f
c
c  F77 routines for 2D time integration subroutines
c
c***********************************************************************

c***********************************************************************
c The TVD Runge-Kutta methods used in these subroutines are discussed
c in Osher & Fedkiw (2003).
c***********************************************************************

c***********************************************************************
c
c  Advance the solution 'u' through a single first-order Runge-Kutta
c  (i.e, forward Euler) step.
c
c  Parameters
c  ----------
c  u_next: [output] u(t + dt)
c
c  u_current: u(t)
c
c  rhs: right-hand side of time evolution equation
c
c  dt: step size
c
c  *_gb: index range for ghostbox
c
c  *_fb: index range for fillbox
c
c  Notes
c  -----
c  * This is also the first step of all of the TVD Runge-Kutta schemes
c    implemented in this library.
c
c***********************************************************************
      subroutine pqsMath2dRK1Step(
     &  u_next,
     &  ilo_u_next_gb, ihi_u_next_gb,
     &  jlo_u_next_gb, jhi_u_next_gb,
     &  u_current,
     &  ilo_u_current_gb, ihi_u_current_gb,
     &  jlo_u_current_gb, jhi_u_current_gb,
     &  rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dt)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_u_next_gb, ihi_u_next_gb
      integer jlo_u_next_gb, jhi_u_next_gb
      integer ilo_u_current_gb, ihi_u_current_gb
      integer jlo_u_current_gb, jhi_u_current_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      @REAL@ u_next(ilo_u_next_gb:ihi_u_next_gb,
     &              jlo_u_next_gb:jhi_u_next_gb)
      @REAL@ u_current(ilo_u_current_gb:ihi_u_current_gb,
     &                 jlo_u_current_gb:jhi_u_current_gb)
      @REAL@ rhs(ilo_rhs_gb:ihi_rhs_gb,
     &           jlo_rhs_gb:jhi_rhs_gb)
      integer i, j
      @REAL@ dt

c     { begin loop over grid
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb

          u_next(i,j) = u_current(i,j) + dt*rhs(i,j)

        enddo
      enddo
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************

c***********************************************************************
c
c  Advance the solution 'u' by through first stage of a second-order
c  TVD Runge-Kutta step.
c
c  Parameters
c  ----------
c  u_stage1: [output] u_approx(t + dt)
c
c  u_cur: u(t)
c
c  rhs: right-hand side of time evolution equation
c
c  dt: step size
c
c  *_gb: index range for ghostbox
c
c  *_fb: index range for fillbox
c
c  NOTES:
c   - the first stage of TVD RK2 is identical to a single RK1 step
c
c***********************************************************************
      subroutine pqsMath2dTVDRK2Stage1(
     &  u_stage1,
     &  ilo_u_stage1_gb, ihi_u_stage1_gb,
     &  jlo_u_stage1_gb, jhi_u_stage1_gb,
     &  u_current,
     &  ilo_u_current_gb, ihi_u_current_gb,
     &  jlo_u_current_gb, jhi_u_current_gb,
     &  rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dt)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_u_stage1_gb, ihi_u_stage1_gb
      integer jlo_u_stage1_gb, jhi_u_stage1_gb
      integer ilo_u_current_gb, ihi_u_current_gb
      integer jlo_u_current_gb, jhi_u_current_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      @REAL@ u_stage1(ilo_u_stage1_gb:ihi_u_stage1_gb,
     &                jlo_u_stage1_gb:jhi_u_stage1_gb)
      @REAL@ u_current(ilo_u_current_gb:ihi_u_current_gb,
     &                 jlo_u_current_gb:jhi_u_current_gb)
      @REAL@ rhs(ilo_rhs_gb:ihi_rhs_gb,
     &           jlo_rhs_gb:jhi_rhs_gb)
      @REAL@ dt

c     use pqsMath2dRK1Step() to compute first stage
      call pqsMath2dRK1Step(u_stage1,
     &                      ilo_u_stage1_gb, ihi_u_stage1_gb,
     &                      jlo_u_stage1_gb, jhi_u_stage1_gb,
     &                      u_current,
     &                      ilo_u_current_gb, ihi_u_current_gb,
     &                      jlo_u_current_gb, jhi_u_current_gb,
     &                      rhs,
     &                      ilo_rhs_gb, ihi_rhs_gb,
     &                      jlo_rhs_gb, jhi_rhs_gb,
     &                      ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &                      dt)

      return
      end
c } end subroutine
c***********************************************************************

c***********************************************************************
c
c  Advance the solution 'u' by through second stage of a second-order
c  TVD Runge-Kutta step.
c
c  Parameters
c  ----------
c  u_next: [output] u(t + dt)
c
c  u_stage1: u_approx(t + dt)
c
c  u_cur: u(t)
c
c  rhs: right-hand side of time evolution equation
c
c  dt: step size
c
c  *_gb: index range for ghostbox
c
c  *_fb: index range for fillbox
c
c***********************************************************************
      subroutine pqsMath2dTVDRK2Stage2(
     &  u_next,
     &  ilo_u_next_gb, ihi_u_next_gb,
     &  jlo_u_next_gb, jhi_u_next_gb,
     &  u_stage1,
     &  ilo_u_stage1_gb, ihi_u_stage1_gb,
     &  jlo_u_stage1_gb, jhi_u_stage1_gb,
     &  u_current,
     &  ilo_u_current_gb, ihi_u_current_gb,
     &  jlo_u_current_gb, jhi_u_current_gb,
     &  rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dt)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_u_next_gb, ihi_u_next_gb
      integer jlo_u_next_gb, jhi_u_next_gb
      integer ilo_u_stage1_gb, ihi_u_stage1_gb
      integer jlo_u_stage1_gb, jhi_u_stage1_gb
      integer ilo_u_current_gb, ihi_u_current_gb
      integer jlo_u_current_gb, jhi_u_current_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      @REAL@ u_next(ilo_u_next_gb:ihi_u_next_gb,
     &              jlo_u_next_gb:jhi_u_next_gb)
      @REAL@ u_stage1(ilo_u_stage1_gb:ihi_u_stage1_gb,
     &                jlo_u_stage1_gb:jhi_u_stage1_gb)
      @REAL@ u_current(ilo_u_current_gb:ihi_u_current_gb,
     &                 jlo_u_current_gb:jhi_u_current_gb)
      @REAL@ rhs(ilo_rhs_gb:ihi_rhs_gb,
     &               jlo_rhs_gb:jhi_rhs_gb)
      integer i, j
      @REAL@ dt

c     { begin loop over grid
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb

          u_next(i,j) = 0.5d0*( u_current(i,j)
     &                        + u_stage1(i,j) + dt*rhs(i,j) )

        enddo
      enddo
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************

c***********************************************************************
c
c  Advance the solution 'u' by through first stage of a third-order
c  TVD Runge-Kutta step.
c
c  Parameters
c  ----------
c  u_stage1: [output] u_approx(t + dt)
c
c  u_cur: u(t)
c
c  rhs: right-hand side of time evolution equation
c
c  dt: step size
c
c  *_gb: index range for ghostbox
c
c  *_fb: index range for fillbox
c
c  NOTES:
c   - the first stage of TVD RK3 is identical to a single RK1 step
c
c***********************************************************************
      subroutine pqsMath2dTVDRK3Stage1(
     &  u_stage1,
     &  ilo_u_stage1_gb, ihi_u_stage1_gb,
     &  jlo_u_stage1_gb, jhi_u_stage1_gb,
     &  u_current,
     &  ilo_u_current_gb, ihi_u_current_gb,
     &  jlo_u_current_gb, jhi_u_current_gb,
     &  rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dt)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_u_stage1_gb, ihi_u_stage1_gb
      integer jlo_u_stage1_gb, jhi_u_stage1_gb
      integer ilo_u_current_gb, ihi_u_current_gb
      integer jlo_u_current_gb, jhi_u_current_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      @REAL@ u_stage1(ilo_u_stage1_gb:ihi_u_stage1_gb,
     &                jlo_u_stage1_gb:jhi_u_stage1_gb)
      @REAL@ u_current(ilo_u_current_gb:ihi_u_current_gb,
     &             jlo_u_current_gb:jhi_u_current_gb)
      @REAL@ rhs(ilo_rhs_gb:ihi_rhs_gb,
     &           jlo_rhs_gb:jhi_rhs_gb)
      @REAL@ dt

c     use pqsMath2dRK1Step() to compute first stage
      call pqsMath2dRK1Step(u_stage1,
     &                      ilo_u_stage1_gb, ihi_u_stage1_gb,
     &                      jlo_u_stage1_gb, jhi_u_stage1_gb,
     &                      u_current,
     &                      ilo_u_current_gb, ihi_u_current_gb,
     &                      jlo_u_current_gb, jhi_u_current_gb,
     &                      rhs,
     &                      ilo_rhs_gb, ihi_rhs_gb,
     &                      jlo_rhs_gb, jhi_rhs_gb,
     &                      ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &                      dt)

      return
      end
c } end subroutine
c***********************************************************************

c***********************************************************************
c
c  Advance the solution 'u' by through second stage of a third-order
c  TVD Runge-Kutta step.
c
c  Parameters
c  ----------
c  u_stage2: [output] u_approx(t + dt/2)
c
c  u_stage1: u_approx(t + dt)
c
c  u_cur: u(t)
c
c  rhs: right-hand side of time evolution equation
c
c  dt: step size
c
c  *_gb: index range for ghostbox
c
c  *_fb: index range for fillbox
c
c***********************************************************************
      subroutine pqsMath2dTVDRK3Stage2(
     &  u_stage2,
     &  ilo_u_stage2_gb, ihi_u_stage2_gb,
     &  jlo_u_stage2_gb, jhi_u_stage2_gb,
     &  u_stage1,
     &  ilo_u_stage1_gb, ihi_u_stage1_gb,
     &  jlo_u_stage1_gb, jhi_u_stage1_gb,
     &  u_current,
     &  ilo_u_current_gb, ihi_u_current_gb,
     &  jlo_u_current_gb, jhi_u_current_gb,
     &  rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dt)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_u_stage2_gb, ihi_u_stage2_gb
      integer jlo_u_stage2_gb, jhi_u_stage2_gb
      integer ilo_u_stage1_gb, ihi_u_stage1_gb
      integer jlo_u_stage1_gb, jhi_u_stage1_gb
      integer ilo_u_current_gb, ihi_u_current_gb
      integer jlo_u_current_gb, jhi_u_current_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      @REAL@ u_stage2(ilo_u_stage2_gb:ihi_u_stage2_gb,
     &                jlo_u_stage2_gb:jhi_u_stage2_gb)
      @REAL@ u_stage1(ilo_u_stage1_gb:ihi_u_stage1_gb,
     &                jlo_u_stage1_gb:jhi_u_stage1_gb)
      @REAL@ u_current(ilo_u_current_gb:ihi_u_current_gb,
     &                 jlo_u_current_gb:jhi_u_current_gb)
      @REAL@ rhs(ilo_rhs_gb:ihi_rhs_gb,
     &           jlo_rhs_gb:jhi_rhs_gb)
      integer i, j
      @REAL@ dt

c     { begin loop over grid
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb

          u_stage2(i,j) = 0.75d0*u_current(i,j)
     &                  + 0.25d0*( u_stage1(i,j) + dt*rhs(i,j) )

        enddo
      enddo
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************

c***********************************************************************
c
c  Advance the solution 'u' by through third stage of a third-order
c  TVD Runge-Kutta step.
c
c  Parameters
c  ----------
c  u_next: [output] u(t + dt)
c
c  u_stage2: u_approx(t + dt/2)
c
c  u_cur: u(t)
c
c  rhs: right-hand side of time evolution equation
c
c  dt: step size
c
c  *_gb: index range for ghostbox
c
c  *_fb: index range for fillbox
c
c***********************************************************************
      subroutine pqsMath2dTVDRK3Stage3(
     &  u_next,
     &  ilo_u_next_gb, ihi_u_next_gb,
     &  jlo_u_next_gb, jhi_u_next_gb,
     &  u_stage2,
     &  ilo_u_stage2_gb, ihi_u_stage2_gb,
     &  jlo_u_stage2_gb, jhi_u_stage2_gb,
     &  u_current,
     &  ilo_u_current_gb, ihi_u_current_gb,
     &  jlo_u_current_gb, jhi_u_current_gb,
     &  rhs,
     &  ilo_rhs_gb, ihi_rhs_gb,
     &  jlo_rhs_gb, jhi_rhs_gb,
     &  ilo_fb, ihi_fb, jlo_fb, jhi_fb,
     &  dt)
c***********************************************************************
c { begin subroutine
      implicit none

      integer ilo_u_next_gb, ihi_u_next_gb
      integer jlo_u_next_gb, jhi_u_next_gb
      integer ilo_u_stage2_gb, ihi_u_stage2_gb
      integer jlo_u_stage2_gb, jhi_u_stage2_gb
      integer ilo_u_current_gb, ihi_u_current_gb
      integer jlo_u_current_gb, jhi_u_current_gb
      integer ilo_rhs_gb, ihi_rhs_gb
      integer jlo_rhs_gb, jhi_rhs_gb
      integer ilo_fb, ihi_fb, jlo_fb, jhi_fb
      @REAL@ u_next(ilo_u_next_gb:ihi_u_next_gb,
     &              jlo_u_next_gb:jhi_u_next_gb)
      @REAL@ u_stage2(ilo_u_stage2_gb:ihi_u_stage2_gb,
     &                jlo_u_stage2_gb:jhi_u_stage2_gb)
      @REAL@ u_current(ilo_u_current_gb:ihi_u_current_gb,
     &                 jlo_u_current_gb:jhi_u_current_gb)
      @REAL@ rhs(ilo_rhs_gb:ihi_rhs_gb,
     &           jlo_rhs_gb:jhi_rhs_gb)
      integer i, j
      @REAL@ dt
      @REAL@ one_third, two_thirds
      parameter (one_third = 1.d0/3.d0)
      parameter (two_thirds = 2.d0/3.d0)

c     { begin loop over grid
      do j=jlo_fb,jhi_fb
        do i=ilo_fb,ihi_fb

          u_next(i,j) = one_third*u_current(i,j)
     &                + two_thirds*( u_stage2(i,j) + dt*rhs(i,j) )

        enddo
      enddo
c     } end loop over grid

      return
      end
c } end subroutine
c***********************************************************************
