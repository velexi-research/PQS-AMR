/* \file sample.conf
 *
 * \brief
 * Sample input file for 3D PQS AMR simulation: periodic circle packging
 */

// Base name for output files.
base_name = "PQS-AMR-3D-PERIODIC-CIRCLE-PACKING"

// Whether to log all nodes in a parallel run.
log_all_nodes = TRUE

// Restart parameters
restart_interval = 100

// Visualization parameters
enable_viz = TRUE
viz_write_interval = 1
viz_num_procs_per_file = 1

// Debugging parameters
enable_debug = TRUE

PQS {
    // Physical parameters
    initial_curvature = 1.4142135623730951  // sqrt(2)
    //final_curvature = 1.4142135623730951  // sqrt(2)
    //final_curvature = 1.5
    //final_curvature = 1.25
    final_curvature = 20

    curvature_step = 0.25

    // Physical parameters
    surface_tension = 0.04

    use_slightly_compressible_model = TRUE
    target_volume = 1.0
    bulk_modulus = 1e6

    // Numerical method parameters
    lsm_spatial_derivative_type = "ENO1"
    //time_integration_order = 1
    //lsm_spatial_derivative_type = "WENO5"
    time_integration_order = 3

    // Level set method parameters
    //lsm_steady_state_condition = 0.1
    lsm_steady_state_condition = 2
    // lsm_steady_state_condition = 0.001
    // lsm_stop_time = 1.0
    // lsm_max_iterations = 10
    lsm_saturation_steady_state_condition = 0.001

    // reinitialization_steady_state_condition = 0.001
    // reinitialization_stop_time = 1.0
    // reinitialization_max_iterations = 10

    // AMR parameters
    // refinement_cutoff_multiplier = 5
    tag_buffer = 1
    // regrid_interval = 10
} // PQS

InterfaceInitModule {
    radius = 0.7071067811865475  // sqrt(2) / 2
} // InterfaceInitModule

PoreInitModule {
    radius = 0.7071067811865475  // sqrt(2) / 2
} // InterfaceInitModule

SAMRAI {
    Geometry {
        // Problem dimension
        dim = 3

        //  Specify lower/upper corners of the computational domain and a
        //  set of non-overlapping boxes defining domain interior.  If union
        //  of boxes is not a parallelpiped, lower/upper corner data corresponds
        //  to min/max corner indices over all boxes given.
        //  x_lo  -- (double array) lower corner of computational domain [REQD]
        //  x_up  -- (double array) upper corner of computational domain [REQD]
        //  domain_boxes  -- (box array) set of boxes that define interior of
        //                   hysical domain. [REQD]
        //  periodic_dimension -- (int array) coordinate directions in which
        //                        domain is periodic.  Zero indicates not
        //                        periodic, non-zero value indicates
        //                        periodicity. [0]
        domain_boxes = [(0, 0, 0), (49, 49, 49)]
        x_lo         = -1, -1, -1
        x_up         = 1, 1, 1

        periodic_dimension = 1, 1, 1
    } // Geometry

    PatchHierarchy {
        // Maximum number of levels in PatchHierarchy
        max_levels = 2

        ratio_to_coarser {
            level_1            = 2, 2, 2
            // all finer levels will use same values as level_1
        }

        largest_patch_size {
            level_0 = 25, 25, 25
            // all finer levels will use same values as level_0
        }

        smallest_patch_size {
            level_0 = 8, 8, 8
            // all finer levels will use same values as level_0
        }
    } // PatchHierarchy

    BoxGenerator {
        // the default load balancer input parameters are usually sufficient
    }

    LoadBalancer {
        // the default load balancer input parameters are usually sufficient
    }

    GriddingAlgorithm {
    }

} // SAMRAI
